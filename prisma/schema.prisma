// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  passwordHash      String
  image             String?
  accounts          Account[]
  posts             Post[]
  reviews           Review[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("users")
}

model Post {
  id                String     @id @default(cuid())
  title             String
  content           String
  // categories   CategoryPost[]
  authorId          String
  author            User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image             String?
  status            PostStatus @default(PUBLISHED)
  reviews           Review[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  languageCode      String     @db.VarChar(10)
}

enum PostStatus {
  TRASH
  DRAFT
  PUBLISHED
}

// model Category {
//   slug         String         @id @default(cuid())
//   translations CategoryTranslation[]
//   posts        CategoryPost[]
// }

// model CategoryTranslation {
//   id           String   @id @default(cuid())
//   name         String
//   categorySlug String
//   category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
//   languageCode String   @db.VarChar(10)

//   @@unique([categorySlug, languageCode])
// }

// model CategoryPost {
//   categorySlug String
//   category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
//   postId       String
//   post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

//   @@id([categorySlug, postId])
// }

model Review {
  id        String     @id @default(cuid())
  content   String
  postId    String
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([postId, authorId])
}
