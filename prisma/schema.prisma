// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?  @db.VarChar(255)
  role           Role     @default(SUBSCRIBER)
  isApproved     Boolean  @default(false)
  posts          Post[]
  reviews        Review[]
  favoritePosts  Post[]   @relation("UserFavoritePosts")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  ADMINISTRATOR
  AUTHOR
  EDITOR
  SUBSCRIBER
}

model Post {
  id           String     @id @default(cuid())
  title        String
  content      String
  categories   Category[] @relation("PostCategories")
  tags         Tag[]
  authorId     String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image        String?
  status       PostStatus @default(DRAFT)
  reviews      Review[]
  favoritedBy  User[]     @relation("UserFavoritePosts")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  languageCode String
  language     Language   @relation(fields: [languageCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
}

enum PostStatus {
  TRASH
  DRAFT
  PUBLISHED
}

model Category {
  id    String @id @default(cuid())
  slug  String @default(cuid())
  name  String
  posts Post[] @relation("PostCategories")
}

model Tag {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model Review {
  id        String     @id @default(cuid())
  content   String
  postId    String
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([postId, authorId])
}

model Language {
  code  String @id
  name  String
  posts Post[]
}
