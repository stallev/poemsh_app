// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  password          String
  name              String?         @db.VarChar(255)
  role              Role            @default(SUBSCRIBER)
  verified          Boolean         @default(true)
  isApproved        Boolean         @default(false)
  userSourceType    UserSourceType  @default(EMAIL)
  posts             Post[]
  reviews           Review[]
  favoritePosts     Post[]          @relation("UserFavoritePosts")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum Role {
  ADMINISTRATOR
  AUTHOR
  EDITOR
  SUBSCRIBER
}

enum UserSourceType {
  EMAIL
  EXTERNALPROVIDER
}

model Post {
  id           String     @id @default(cuid())
  title        String
  content      String
  categories   CategoryPost[]
  authorId     String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image        String?
  status       PostStatus @default(PUBLISHED)
  reviews      Review[]
  favoritedBy  User[]     @relation("UserFavoritePosts")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  languageCode String     @db.VarChar(10)
}

enum PostStatus {
  TRASH
  DRAFT
  PUBLISHED
}

model Category {
  slug         String         @id @default(cuid())
  translations CategoryTranslation[]
  posts        CategoryPost[]
}

model CategoryTranslation {
  id           String   @id @default(cuid())
  name         String
  categorySlug String
  category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  languageCode String   @db.VarChar(10)

  @@unique([categorySlug, languageCode])
}

model CategoryPost {
  categorySlug String
  category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postId       String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([categorySlug, postId])
}

model Review {
  id        String     @id @default(cuid())
  content   String
  postId    String
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([postId, authorId])
}
